# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.account_api_api import AccountAPIApi  # noqa: E501
from swagger_client.rest import ApiException


class TestAccountAPIApi(unittest.TestCase):
    """AccountAPIApi unit test stubs"""

    def setUp(self):
        self.api = AccountAPIApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_add_account(self):
        """Test case for add_account

        Adds a new real account  # noqa: E501
        """
        pass

    def test_add_simulated_account(self):
        """Test case for add_simulated_account

        Adds a new simulated account  # noqa: E501
        """
        pass

    def test_adjust_leverage_settings(self):
        """Test case for adjust_leverage_settings

        Sets new properties to a leverage configuration  # noqa: E501
        """
        pass

    def test_delete_account(self):
        """Test case for delete_account

        Deletes the given account and all its history  # noqa: E501
        """
        pass

    def test_edit_account_keys(self):
        """Test case for edit_account_keys

        Updates the real account its API keys  # noqa: E501
        """
        pass

    def test_edit_account_visabilty(self):
        """Test case for edit_account_visabilty

        Changes the account its public visability  # noqa: E501
        """
        pass

    def test_get_account_data(self):
        """Test case for get_account_data

        Returns all the details of the given account (wallet, orders, positions)  # noqa: E501
        """
        pass

    def test_get_accounts(self):
        """Test case for get_accounts

        Returns a list of all real and simulated accounts  # noqa: E501
        """
        pass

    def test_get_all_orders(self):
        """Test case for get_all_orders

        Returns all the user its open orders of all accounts  # noqa: E501
        """
        pass

    def test_get_all_positions(self):
        """Test case for get_all_positions

        Returns all the user its open positions of all accounts  # noqa: E501
        """
        pass

    def test_get_all_trades(self):
        """Test case for get_all_trades

        Returns all the recent historical trades of all the accounts  # noqa: E501
        """
        pass

    def test_get_all_wallets(self):
        """Test case for get_all_wallets

        Returns all the user its wallets of all accounts  # noqa: E501
        """
        pass

    def test_get_leverage_settings(self):
        """Test case for get_leverage_settings

        Returns the leverage settings as setup on the API (per market)  # noqa: E501
        """
        pass

    def test_get_orders(self):
        """Test case for get_orders

        Returns the open orders of the given account  # noqa: E501
        """
        pass

    def test_get_positions(self):
        """Test case for get_positions

        Returns the open positions of the given account  # noqa: E501
        """
        pass

    def test_get_trades(self):
        """Test case for get_trades

        Returns the historical trades of the given account  # noqa: E501
        """
        pass

    def test_get_wallet(self):
        """Test case for get_wallet

        Returns the wallet of the given account  # noqa: E501
        """
        pass

    def test_rename_account(self):
        """Test case for rename_account

        Renames the given account  # noqa: E501
        """
        pass

    def test_set_wallet_amount_simulated(self):
        """Test case for set_wallet_amount_simulated

        Sets a new coin amount to a simulated wallet  # noqa: E501
        """
        pass

    def test_test_account(self):
        """Test case for test_account

        Adds a new testnet account  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
