# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TradingapiPlaceOrderResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'order_id': 'str',
        'order': 'object',
        'result': 'object',
        'error_message': 'str'
    }

    attribute_map = {
        'success': 'Success',
        'order_id': 'OrderId',
        'order': 'Order',
        'result': 'Result',
        'error_message': 'ErrorMessage'
    }

    def __init__(self, success=None, order_id=None, order=None, result=None, error_message=None):  # noqa: E501
        """TradingapiPlaceOrderResponse - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._order_id = None
        self._order = None
        self._result = None
        self._error_message = None
        self.discriminator = None
        if success is not None:
            self.success = success
        if order_id is not None:
            self.order_id = order_id
        if order is not None:
            self.order = order
        if result is not None:
            self.result = result
        if error_message is not None:
            self.error_message = error_message

    @property
    def success(self):
        """Gets the success of this TradingapiPlaceOrderResponse.  # noqa: E501


        :return: The success of this TradingapiPlaceOrderResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this TradingapiPlaceOrderResponse.


        :param success: The success of this TradingapiPlaceOrderResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def order_id(self):
        """Gets the order_id of this TradingapiPlaceOrderResponse.  # noqa: E501


        :return: The order_id of this TradingapiPlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this TradingapiPlaceOrderResponse.


        :param order_id: The order_id of this TradingapiPlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def order(self):
        """Gets the order of this TradingapiPlaceOrderResponse.  # noqa: E501


        :return: The order of this TradingapiPlaceOrderResponse.  # noqa: E501
        :rtype: object
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TradingapiPlaceOrderResponse.


        :param order: The order of this TradingapiPlaceOrderResponse.  # noqa: E501
        :type: object
        """

        self._order = order

    @property
    def result(self):
        """Gets the result of this TradingapiPlaceOrderResponse.  # noqa: E501


        :return: The result of this TradingapiPlaceOrderResponse.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TradingapiPlaceOrderResponse.


        :param result: The result of this TradingapiPlaceOrderResponse.  # noqa: E501
        :type: object
        """

        self._result = result

    @property
    def error_message(self):
        """Gets the error_message of this TradingapiPlaceOrderResponse.  # noqa: E501


        :return: The error_message of this TradingapiPlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this TradingapiPlaceOrderResponse.


        :param error_message: The error_message of this TradingapiPlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TradingapiPlaceOrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TradingapiPlaceOrderResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
