# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExchangeapiPlaceOrderResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'user_id': 'str',
        'account_id': 'str',
        'market': 'str',
        'type': 'object',
        'direction': 'object',
        'price': 'float',
        'trigger_price': 'float',
        'trigger_price_type': 'object',
        'amount': 'float',
        'post_only': 'bool',
        'reduce_only': 'bool',
        'hidden_order': 'bool',
        'time_in_force': 'object',
        'source': 'str',
        'notes': 'str',
        'fee': 'object',
        'is_market_order': 'bool'
    }

    attribute_map = {
        'request_id': 'RequestId',
        'user_id': 'UserId',
        'account_id': 'AccountId',
        'market': 'Market',
        'type': 'Type',
        'direction': 'Direction',
        'price': 'Price',
        'trigger_price': 'TriggerPrice',
        'trigger_price_type': 'TriggerPriceType',
        'amount': 'Amount',
        'post_only': 'PostOnly',
        'reduce_only': 'ReduceOnly',
        'hidden_order': 'HiddenOrder',
        'time_in_force': 'TimeInForce',
        'source': 'Source',
        'notes': 'Notes',
        'fee': 'Fee',
        'is_market_order': 'IsMarketOrder'
    }

    def __init__(self, request_id=None, user_id=None, account_id=None, market=None, type=None, direction=None, price=None, trigger_price=None, trigger_price_type=None, amount=None, post_only=None, reduce_only=None, hidden_order=None, time_in_force=None, source=None, notes=None, fee=None, is_market_order=None):  # noqa: E501
        """ExchangeapiPlaceOrderResponse - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._user_id = None
        self._account_id = None
        self._market = None
        self._type = None
        self._direction = None
        self._price = None
        self._trigger_price = None
        self._trigger_price_type = None
        self._amount = None
        self._post_only = None
        self._reduce_only = None
        self._hidden_order = None
        self._time_in_force = None
        self._source = None
        self._notes = None
        self._fee = None
        self._is_market_order = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if user_id is not None:
            self.user_id = user_id
        if account_id is not None:
            self.account_id = account_id
        if market is not None:
            self.market = market
        if type is not None:
            self.type = type
        if direction is not None:
            self.direction = direction
        if price is not None:
            self.price = price
        if trigger_price is not None:
            self.trigger_price = trigger_price
        if trigger_price_type is not None:
            self.trigger_price_type = trigger_price_type
        if amount is not None:
            self.amount = amount
        if post_only is not None:
            self.post_only = post_only
        if reduce_only is not None:
            self.reduce_only = reduce_only
        if hidden_order is not None:
            self.hidden_order = hidden_order
        if time_in_force is not None:
            self.time_in_force = time_in_force
        if source is not None:
            self.source = source
        if notes is not None:
            self.notes = notes
        if fee is not None:
            self.fee = fee
        if is_market_order is not None:
            self.is_market_order = is_market_order

    @property
    def request_id(self):
        """Gets the request_id of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The request_id of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ExchangeapiPlaceOrderResponse.


        :param request_id: The request_id of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def user_id(self):
        """Gets the user_id of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The user_id of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ExchangeapiPlaceOrderResponse.


        :param user_id: The user_id of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def account_id(self):
        """Gets the account_id of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The account_id of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ExchangeapiPlaceOrderResponse.


        :param account_id: The account_id of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def market(self):
        """Gets the market of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The market of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this ExchangeapiPlaceOrderResponse.


        :param market: The market of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def type(self):
        """Gets the type of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The type of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExchangeapiPlaceOrderResponse.


        :param type: The type of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: object
        """

        self._type = type

    @property
    def direction(self):
        """Gets the direction of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The direction of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: object
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ExchangeapiPlaceOrderResponse.


        :param direction: The direction of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: object
        """

        self._direction = direction

    @property
    def price(self):
        """Gets the price of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The price of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ExchangeapiPlaceOrderResponse.


        :param price: The price of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def trigger_price(self):
        """Gets the trigger_price of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The trigger_price of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._trigger_price

    @trigger_price.setter
    def trigger_price(self, trigger_price):
        """Sets the trigger_price of this ExchangeapiPlaceOrderResponse.


        :param trigger_price: The trigger_price of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: float
        """

        self._trigger_price = trigger_price

    @property
    def trigger_price_type(self):
        """Gets the trigger_price_type of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The trigger_price_type of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: object
        """
        return self._trigger_price_type

    @trigger_price_type.setter
    def trigger_price_type(self, trigger_price_type):
        """Sets the trigger_price_type of this ExchangeapiPlaceOrderResponse.


        :param trigger_price_type: The trigger_price_type of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: object
        """

        self._trigger_price_type = trigger_price_type

    @property
    def amount(self):
        """Gets the amount of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The amount of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ExchangeapiPlaceOrderResponse.


        :param amount: The amount of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def post_only(self):
        """Gets the post_only of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The post_only of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: bool
        """
        return self._post_only

    @post_only.setter
    def post_only(self, post_only):
        """Sets the post_only of this ExchangeapiPlaceOrderResponse.


        :param post_only: The post_only of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: bool
        """

        self._post_only = post_only

    @property
    def reduce_only(self):
        """Gets the reduce_only of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The reduce_only of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: bool
        """
        return self._reduce_only

    @reduce_only.setter
    def reduce_only(self, reduce_only):
        """Sets the reduce_only of this ExchangeapiPlaceOrderResponse.


        :param reduce_only: The reduce_only of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: bool
        """

        self._reduce_only = reduce_only

    @property
    def hidden_order(self):
        """Gets the hidden_order of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The hidden_order of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_order

    @hidden_order.setter
    def hidden_order(self, hidden_order):
        """Sets the hidden_order of this ExchangeapiPlaceOrderResponse.


        :param hidden_order: The hidden_order of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: bool
        """

        self._hidden_order = hidden_order

    @property
    def time_in_force(self):
        """Gets the time_in_force of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The time_in_force of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: object
        """
        return self._time_in_force

    @time_in_force.setter
    def time_in_force(self, time_in_force):
        """Sets the time_in_force of this ExchangeapiPlaceOrderResponse.


        :param time_in_force: The time_in_force of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: object
        """

        self._time_in_force = time_in_force

    @property
    def source(self):
        """Gets the source of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The source of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ExchangeapiPlaceOrderResponse.


        :param source: The source of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def notes(self):
        """Gets the notes of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The notes of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ExchangeapiPlaceOrderResponse.


        :param notes: The notes of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def fee(self):
        """Gets the fee of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The fee of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: object
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this ExchangeapiPlaceOrderResponse.


        :param fee: The fee of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: object
        """

        self._fee = fee

    @property
    def is_market_order(self):
        """Gets the is_market_order of this ExchangeapiPlaceOrderResponse.  # noqa: E501


        :return: The is_market_order of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_market_order

    @is_market_order.setter
    def is_market_order(self, is_market_order):
        """Sets the is_market_order of this ExchangeapiPlaceOrderResponse.


        :param is_market_order: The is_market_order of this ExchangeapiPlaceOrderResponse.  # noqa: E501
        :type: bool
        """

        self._is_market_order = is_market_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExchangeapiPlaceOrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExchangeapiPlaceOrderResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
