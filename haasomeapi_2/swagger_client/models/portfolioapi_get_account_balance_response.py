# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PortfolioapiGetAccountBalanceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'int',
        'account_id': 'str',
        'value': 'float',
        'value_in_btc': 'float',
        'value_in_usd': 'float',
        'currency_balances': 'object',
        'history': 'object',
        'color': 'str'
    }

    attribute_map = {
        'timestamp': 'Timestamp',
        'account_id': 'AccountId',
        'value': 'Value',
        'value_in_btc': 'ValueInBTC',
        'value_in_usd': 'ValueInUSD',
        'currency_balances': 'CurrencyBalances',
        'history': 'History',
        'color': 'Color'
    }

    def __init__(self, timestamp=None, account_id=None, value=None, value_in_btc=None, value_in_usd=None, currency_balances=None, history=None, color=None):  # noqa: E501
        """PortfolioapiGetAccountBalanceResponse - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._account_id = None
        self._value = None
        self._value_in_btc = None
        self._value_in_usd = None
        self._currency_balances = None
        self._history = None
        self._color = None
        self.discriminator = None
        if timestamp is not None:
            self.timestamp = timestamp
        if account_id is not None:
            self.account_id = account_id
        if value is not None:
            self.value = value
        if value_in_btc is not None:
            self.value_in_btc = value_in_btc
        if value_in_usd is not None:
            self.value_in_usd = value_in_usd
        if currency_balances is not None:
            self.currency_balances = currency_balances
        if history is not None:
            self.history = history
        if color is not None:
            self.color = color

    @property
    def timestamp(self):
        """Gets the timestamp of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501


        :return: The timestamp of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PortfolioapiGetAccountBalanceResponse.


        :param timestamp: The timestamp of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def account_id(self):
        """Gets the account_id of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501


        :return: The account_id of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PortfolioapiGetAccountBalanceResponse.


        :param account_id: The account_id of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def value(self):
        """Gets the value of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501


        :return: The value of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PortfolioapiGetAccountBalanceResponse.


        :param value: The value of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def value_in_btc(self):
        """Gets the value_in_btc of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501


        :return: The value_in_btc of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._value_in_btc

    @value_in_btc.setter
    def value_in_btc(self, value_in_btc):
        """Sets the value_in_btc of this PortfolioapiGetAccountBalanceResponse.


        :param value_in_btc: The value_in_btc of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :type: float
        """

        self._value_in_btc = value_in_btc

    @property
    def value_in_usd(self):
        """Gets the value_in_usd of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501


        :return: The value_in_usd of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._value_in_usd

    @value_in_usd.setter
    def value_in_usd(self, value_in_usd):
        """Sets the value_in_usd of this PortfolioapiGetAccountBalanceResponse.


        :param value_in_usd: The value_in_usd of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :type: float
        """

        self._value_in_usd = value_in_usd

    @property
    def currency_balances(self):
        """Gets the currency_balances of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501


        :return: The currency_balances of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :rtype: object
        """
        return self._currency_balances

    @currency_balances.setter
    def currency_balances(self, currency_balances):
        """Sets the currency_balances of this PortfolioapiGetAccountBalanceResponse.


        :param currency_balances: The currency_balances of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :type: object
        """

        self._currency_balances = currency_balances

    @property
    def history(self):
        """Gets the history of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501


        :return: The history of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :rtype: object
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this PortfolioapiGetAccountBalanceResponse.


        :param history: The history of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :type: object
        """

        self._history = history

    @property
    def color(self):
        """Gets the color of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501


        :return: The color of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PortfolioapiGetAccountBalanceResponse.


        :param color: The color of this PortfolioapiGetAccountBalanceResponse.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioapiGetAccountBalanceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioapiGetAccountBalanceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
