# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountapiAddAccountRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userid': 'str',
        'interfacekey': 'str',
        'name': 'str',
        'drivercode': 'str',
        'drivertype': 'int',
        'publickey': 'str',
        'privatekey': 'str',
        'extrakey': 'str',
        'istestnet': 'bool'
    }

    attribute_map = {
        'userid': 'userid',
        'interfacekey': 'interfacekey',
        'name': 'name',
        'drivercode': 'drivercode',
        'drivertype': 'drivertype',
        'publickey': 'publickey',
        'privatekey': 'privatekey',
        'extrakey': 'extrakey',
        'istestnet': 'istestnet'
    }

    def __init__(self, userid=None, interfacekey=None, name=None, drivercode=None, drivertype=None, publickey=None, privatekey=None, extrakey=None, istestnet=None):  # noqa: E501
        """AccountapiAddAccountRequest - a model defined in Swagger"""  # noqa: E501
        self._userid = None
        self._interfacekey = None
        self._name = None
        self._drivercode = None
        self._drivertype = None
        self._publickey = None
        self._privatekey = None
        self._extrakey = None
        self._istestnet = None
        self.discriminator = None
        self.userid = userid
        self.interfacekey = interfacekey
        self.name = name
        self.drivercode = drivercode
        self.drivertype = drivertype
        self.publickey = publickey
        self.privatekey = privatekey
        self.extrakey = extrakey
        self.istestnet = istestnet

    @property
    def userid(self):
        """Gets the userid of this AccountapiAddAccountRequest.  # noqa: E501

        The userid as obtained at the login  # noqa: E501

        :return: The userid of this AccountapiAddAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this AccountapiAddAccountRequest.

        The userid as obtained at the login  # noqa: E501

        :param userid: The userid of this AccountapiAddAccountRequest.  # noqa: E501
        :type: str
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")  # noqa: E501

        self._userid = userid

    @property
    def interfacekey(self):
        """Gets the interfacekey of this AccountapiAddAccountRequest.  # noqa: E501

        The interfacekey as generated at login  # noqa: E501

        :return: The interfacekey of this AccountapiAddAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._interfacekey

    @interfacekey.setter
    def interfacekey(self, interfacekey):
        """Sets the interfacekey of this AccountapiAddAccountRequest.

        The interfacekey as generated at login  # noqa: E501

        :param interfacekey: The interfacekey of this AccountapiAddAccountRequest.  # noqa: E501
        :type: str
        """
        if interfacekey is None:
            raise ValueError("Invalid value for `interfacekey`, must not be `None`")  # noqa: E501

        self._interfacekey = interfacekey

    @property
    def name(self):
        """Gets the name of this AccountapiAddAccountRequest.  # noqa: E501


        :return: The name of this AccountapiAddAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountapiAddAccountRequest.


        :param name: The name of this AccountapiAddAccountRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def drivercode(self):
        """Gets the drivercode of this AccountapiAddAccountRequest.  # noqa: E501

        The (driver)code of the exchange, eg; BITFINEX  # noqa: E501

        :return: The drivercode of this AccountapiAddAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._drivercode

    @drivercode.setter
    def drivercode(self, drivercode):
        """Sets the drivercode of this AccountapiAddAccountRequest.

        The (driver)code of the exchange, eg; BITFINEX  # noqa: E501

        :param drivercode: The drivercode of this AccountapiAddAccountRequest.  # noqa: E501
        :type: str
        """
        if drivercode is None:
            raise ValueError("Invalid value for `drivercode`, must not be `None`")  # noqa: E501

        self._drivercode = drivercode

    @property
    def drivertype(self):
        """Gets the drivertype of this AccountapiAddAccountRequest.  # noqa: E501


        :return: The drivertype of this AccountapiAddAccountRequest.  # noqa: E501
        :rtype: int
        """
        return self._drivertype

    @drivertype.setter
    def drivertype(self, drivertype):
        """Sets the drivertype of this AccountapiAddAccountRequest.


        :param drivertype: The drivertype of this AccountapiAddAccountRequest.  # noqa: E501
        :type: int
        """
        if drivertype is None:
            raise ValueError("Invalid value for `drivertype`, must not be `None`")  # noqa: E501

        self._drivertype = drivertype

    @property
    def publickey(self):
        """Gets the publickey of this AccountapiAddAccountRequest.  # noqa: E501

        The public key from the exchange its API  # noqa: E501

        :return: The publickey of this AccountapiAddAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._publickey

    @publickey.setter
    def publickey(self, publickey):
        """Sets the publickey of this AccountapiAddAccountRequest.

        The public key from the exchange its API  # noqa: E501

        :param publickey: The publickey of this AccountapiAddAccountRequest.  # noqa: E501
        :type: str
        """
        if publickey is None:
            raise ValueError("Invalid value for `publickey`, must not be `None`")  # noqa: E501

        self._publickey = publickey

    @property
    def privatekey(self):
        """Gets the privatekey of this AccountapiAddAccountRequest.  # noqa: E501

        The private/secret key from the exchange its API  # noqa: E501

        :return: The privatekey of this AccountapiAddAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._privatekey

    @privatekey.setter
    def privatekey(self, privatekey):
        """Sets the privatekey of this AccountapiAddAccountRequest.

        The private/secret key from the exchange its API  # noqa: E501

        :param privatekey: The privatekey of this AccountapiAddAccountRequest.  # noqa: E501
        :type: str
        """
        if privatekey is None:
            raise ValueError("Invalid value for `privatekey`, must not be `None`")  # noqa: E501

        self._privatekey = privatekey

    @property
    def extrakey(self):
        """Gets the extrakey of this AccountapiAddAccountRequest.  # noqa: E501

        Any extra key which is needed to connect  # noqa: E501

        :return: The extrakey of this AccountapiAddAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._extrakey

    @extrakey.setter
    def extrakey(self, extrakey):
        """Sets the extrakey of this AccountapiAddAccountRequest.

        Any extra key which is needed to connect  # noqa: E501

        :param extrakey: The extrakey of this AccountapiAddAccountRequest.  # noqa: E501
        :type: str
        """
        if extrakey is None:
            raise ValueError("Invalid value for `extrakey`, must not be `None`")  # noqa: E501

        self._extrakey = extrakey

    @property
    def istestnet(self):
        """Gets the istestnet of this AccountapiAddAccountRequest.  # noqa: E501

        Connect to the exchange its testnet (true=yes, false=no)  # noqa: E501

        :return: The istestnet of this AccountapiAddAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._istestnet

    @istestnet.setter
    def istestnet(self, istestnet):
        """Sets the istestnet of this AccountapiAddAccountRequest.

        Connect to the exchange its testnet (true=yes, false=no)  # noqa: E501

        :param istestnet: The istestnet of this AccountapiAddAccountRequest.  # noqa: E501
        :type: bool
        """
        if istestnet is None:
            raise ValueError("Invalid value for `istestnet`, must not be `None`")  # noqa: E501

        self._istestnet = istestnet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountapiAddAccountRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountapiAddAccountRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
