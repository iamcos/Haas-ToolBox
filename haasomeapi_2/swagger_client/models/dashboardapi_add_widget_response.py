# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DashboardapiAddWidgetResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'dashboard_id': 'str',
        'widget_id': 'str',
        'type': 'str',
        'x': 'int',
        'y': 'int',
        'z': 'int',
        'width': 'int',
        'height': 'int',
        'settings': 'object'
    }

    attribute_map = {
        'user_id': 'UserId',
        'dashboard_id': 'DashboardId',
        'widget_id': 'WidgetId',
        'type': 'Type',
        'x': 'X',
        'y': 'Y',
        'z': 'Z',
        'width': 'Width',
        'height': 'Height',
        'settings': 'Settings'
    }

    def __init__(self, user_id=None, dashboard_id=None, widget_id=None, type=None, x=None, y=None, z=None, width=None, height=None, settings=None):  # noqa: E501
        """DashboardapiAddWidgetResponse - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._dashboard_id = None
        self._widget_id = None
        self._type = None
        self._x = None
        self._y = None
        self._z = None
        self._width = None
        self._height = None
        self._settings = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if dashboard_id is not None:
            self.dashboard_id = dashboard_id
        if widget_id is not None:
            self.widget_id = widget_id
        if type is not None:
            self.type = type
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        if z is not None:
            self.z = z
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if settings is not None:
            self.settings = settings

    @property
    def user_id(self):
        """Gets the user_id of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The user_id of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DashboardapiAddWidgetResponse.


        :param user_id: The user_id of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The dashboard_id of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: str
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this DashboardapiAddWidgetResponse.


        :param dashboard_id: The dashboard_id of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: str
        """

        self._dashboard_id = dashboard_id

    @property
    def widget_id(self):
        """Gets the widget_id of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The widget_id of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: str
        """
        return self._widget_id

    @widget_id.setter
    def widget_id(self, widget_id):
        """Sets the widget_id of this DashboardapiAddWidgetResponse.


        :param widget_id: The widget_id of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: str
        """

        self._widget_id = widget_id

    @property
    def type(self):
        """Gets the type of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The type of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DashboardapiAddWidgetResponse.


        :param type: The type of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def x(self):
        """Gets the x of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The x of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this DashboardapiAddWidgetResponse.


        :param x: The x of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: int
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The y of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this DashboardapiAddWidgetResponse.


        :param y: The y of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: int
        """

        self._y = y

    @property
    def z(self):
        """Gets the z of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The z of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: int
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this DashboardapiAddWidgetResponse.


        :param z: The z of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: int
        """

        self._z = z

    @property
    def width(self):
        """Gets the width of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The width of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DashboardapiAddWidgetResponse.


        :param width: The width of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The height of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DashboardapiAddWidgetResponse.


        :param height: The height of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def settings(self):
        """Gets the settings of this DashboardapiAddWidgetResponse.  # noqa: E501


        :return: The settings of this DashboardapiAddWidgetResponse.  # noqa: E501
        :rtype: object
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DashboardapiAddWidgetResponse.


        :param settings: The settings of this DashboardapiAddWidgetResponse.  # noqa: E501
        :type: object
        """

        self._settings = settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DashboardapiAddWidgetResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DashboardapiAddWidgetResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
