# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExchangeapiPlaceOrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userid': 'str',
        'interfacekey': 'str',
        'driver': 'str',
        'publickey': 'str',
        'privatekey': 'str',
        'username': 'str',
        'nonce': 'Int64',
        'market': 'str',
        'direction': 'int',
        'price': 'float',
        'amount': 'float',
        'ismarketorder': 'bool',
        'leverage': 'float',
        'template': 'str'
    }

    attribute_map = {
        'userid': 'userid',
        'interfacekey': 'interfacekey',
        'driver': 'driver',
        'publickey': 'publickey',
        'privatekey': 'privatekey',
        'username': 'username',
        'nonce': 'nonce',
        'market': 'market',
        'direction': 'direction',
        'price': 'price',
        'amount': 'amount',
        'ismarketorder': 'ismarketorder',
        'leverage': 'leverage',
        'template': 'template'
    }

    def __init__(self, userid=None, interfacekey=None, driver=None, publickey=None, privatekey=None, username=None, nonce=None, market=None, direction=None, price=None, amount=None, ismarketorder=None, leverage=None, template=None):  # noqa: E501
        """ExchangeapiPlaceOrderRequest - a model defined in Swagger"""  # noqa: E501
        self._userid = None
        self._interfacekey = None
        self._driver = None
        self._publickey = None
        self._privatekey = None
        self._username = None
        self._nonce = None
        self._market = None
        self._direction = None
        self._price = None
        self._amount = None
        self._ismarketorder = None
        self._leverage = None
        self._template = None
        self.discriminator = None
        self.userid = userid
        self.interfacekey = interfacekey
        self.driver = driver
        self.publickey = publickey
        self.privatekey = privatekey
        self.username = username
        self.nonce = nonce
        self.market = market
        self.direction = direction
        self.price = price
        self.amount = amount
        self.ismarketorder = ismarketorder
        self.leverage = leverage
        self.template = template

    @property
    def userid(self):
        """Gets the userid of this ExchangeapiPlaceOrderRequest.  # noqa: E501

        The userid as obtained at the login  # noqa: E501

        :return: The userid of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this ExchangeapiPlaceOrderRequest.

        The userid as obtained at the login  # noqa: E501

        :param userid: The userid of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")  # noqa: E501

        self._userid = userid

    @property
    def interfacekey(self):
        """Gets the interfacekey of this ExchangeapiPlaceOrderRequest.  # noqa: E501

        The interfacekey as generated at login  # noqa: E501

        :return: The interfacekey of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._interfacekey

    @interfacekey.setter
    def interfacekey(self, interfacekey):
        """Sets the interfacekey of this ExchangeapiPlaceOrderRequest.

        The interfacekey as generated at login  # noqa: E501

        :param interfacekey: The interfacekey of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if interfacekey is None:
            raise ValueError("Invalid value for `interfacekey`, must not be `None`")  # noqa: E501

        self._interfacekey = interfacekey

    @property
    def driver(self):
        """Gets the driver of this ExchangeapiPlaceOrderRequest.  # noqa: E501


        :return: The driver of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this ExchangeapiPlaceOrderRequest.


        :param driver: The driver of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if driver is None:
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def publickey(self):
        """Gets the publickey of this ExchangeapiPlaceOrderRequest.  # noqa: E501

        The public key from the exchange its API  # noqa: E501

        :return: The publickey of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._publickey

    @publickey.setter
    def publickey(self, publickey):
        """Sets the publickey of this ExchangeapiPlaceOrderRequest.

        The public key from the exchange its API  # noqa: E501

        :param publickey: The publickey of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if publickey is None:
            raise ValueError("Invalid value for `publickey`, must not be `None`")  # noqa: E501

        self._publickey = publickey

    @property
    def privatekey(self):
        """Gets the privatekey of this ExchangeapiPlaceOrderRequest.  # noqa: E501

        The private/secret key from the exchange its API  # noqa: E501

        :return: The privatekey of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._privatekey

    @privatekey.setter
    def privatekey(self, privatekey):
        """Sets the privatekey of this ExchangeapiPlaceOrderRequest.

        The private/secret key from the exchange its API  # noqa: E501

        :param privatekey: The privatekey of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if privatekey is None:
            raise ValueError("Invalid value for `privatekey`, must not be `None`")  # noqa: E501

        self._privatekey = privatekey

    @property
    def username(self):
        """Gets the username of this ExchangeapiPlaceOrderRequest.  # noqa: E501

        The username  # noqa: E501

        :return: The username of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ExchangeapiPlaceOrderRequest.

        The username  # noqa: E501

        :param username: The username of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def nonce(self):
        """Gets the nonce of this ExchangeapiPlaceOrderRequest.  # noqa: E501

        The nonce number  # noqa: E501

        :return: The nonce of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: Int64
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this ExchangeapiPlaceOrderRequest.

        The nonce number  # noqa: E501

        :param nonce: The nonce of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: Int64
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")  # noqa: E501

        self._nonce = nonce

    @property
    def market(self):
        """Gets the market of this ExchangeapiPlaceOrderRequest.  # noqa: E501

        The code of the market, eg; BITFINEX_BTC_USD_  # noqa: E501

        :return: The market of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this ExchangeapiPlaceOrderRequest.

        The code of the market, eg; BITFINEX_BTC_USD_  # noqa: E501

        :param market: The market of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501

        self._market = market

    @property
    def direction(self):
        """Gets the direction of this ExchangeapiPlaceOrderRequest.  # noqa: E501


        :return: The direction of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ExchangeapiPlaceOrderRequest.


        :param direction: The direction of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: int
        """
        if direction is None:
            raise ValueError("Invalid value for `direction`, must not be `None`")  # noqa: E501

        self._direction = direction

    @property
    def price(self):
        """Gets the price of this ExchangeapiPlaceOrderRequest.  # noqa: E501


        :return: The price of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ExchangeapiPlaceOrderRequest.


        :param price: The price of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def amount(self):
        """Gets the amount of this ExchangeapiPlaceOrderRequest.  # noqa: E501


        :return: The amount of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ExchangeapiPlaceOrderRequest.


        :param amount: The amount of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def ismarketorder(self):
        """Gets the ismarketorder of this ExchangeapiPlaceOrderRequest.  # noqa: E501


        :return: The ismarketorder of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ismarketorder

    @ismarketorder.setter
    def ismarketorder(self, ismarketorder):
        """Sets the ismarketorder of this ExchangeapiPlaceOrderRequest.


        :param ismarketorder: The ismarketorder of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: bool
        """
        if ismarketorder is None:
            raise ValueError("Invalid value for `ismarketorder`, must not be `None`")  # noqa: E501

        self._ismarketorder = ismarketorder

    @property
    def leverage(self):
        """Gets the leverage of this ExchangeapiPlaceOrderRequest.  # noqa: E501


        :return: The leverage of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: float
        """
        return self._leverage

    @leverage.setter
    def leverage(self, leverage):
        """Sets the leverage of this ExchangeapiPlaceOrderRequest.


        :param leverage: The leverage of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: float
        """
        if leverage is None:
            raise ValueError("Invalid value for `leverage`, must not be `None`")  # noqa: E501

        self._leverage = leverage

    @property
    def template(self):
        """Gets the template of this ExchangeapiPlaceOrderRequest.  # noqa: E501


        :return: The template of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ExchangeapiPlaceOrderRequest.


        :param template: The template of this ExchangeapiPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if template is None:
            raise ValueError("Invalid value for `template`, must not be `None`")  # noqa: E501

        self._template = template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExchangeapiPlaceOrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExchangeapiPlaceOrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
