# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BotapiAddBotResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'bot_id': 'str',
        'bot_name': 'str',
        'script_id': 'str',
        'script_version': 'int',
        'account_id': 'str',
        'market': 'str',
        'execution_id': 'str',
        'is_activated': 'bool',
        'is_favorite': 'bool',
        'realized_profit': 'float',
        'unrealized_profit': 'float',
        'return_on_investment': 'float',
        'trade_amount_error': 'bool',
        'account_error': 'bool',
        'script_error': 'bool',
        'update_counter': 'int',
        'chart_interval': 'int',
        'chart_style': 'int',
        'chart_volume': 'bool',
        'runtime': 'object',
        'script_package': 'object'
    }

    attribute_map = {
        'user_id': 'UserId',
        'bot_id': 'BotId',
        'bot_name': 'BotName',
        'script_id': 'ScriptId',
        'script_version': 'ScriptVersion',
        'account_id': 'AccountId',
        'market': 'Market',
        'execution_id': 'ExecutionId',
        'is_activated': 'IsActivated',
        'is_favorite': 'IsFavorite',
        'realized_profit': 'RealizedProfit',
        'unrealized_profit': 'UnrealizedProfit',
        'return_on_investment': 'ReturnOnInvestment',
        'trade_amount_error': 'TradeAmountError',
        'account_error': 'AccountError',
        'script_error': 'ScriptError',
        'update_counter': 'UpdateCounter',
        'chart_interval': 'ChartInterval',
        'chart_style': 'ChartStyle',
        'chart_volume': 'ChartVolume',
        'runtime': 'Runtime',
        'script_package': 'ScriptPackage'
    }

    def __init__(self, user_id=None, bot_id=None, bot_name=None, script_id=None, script_version=None, account_id=None, market=None, execution_id=None, is_activated=None, is_favorite=None, realized_profit=None, unrealized_profit=None, return_on_investment=None, trade_amount_error=None, account_error=None, script_error=None, update_counter=None, chart_interval=None, chart_style=None, chart_volume=None, runtime=None, script_package=None):  # noqa: E501
        """BotapiAddBotResponse - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._bot_id = None
        self._bot_name = None
        self._script_id = None
        self._script_version = None
        self._account_id = None
        self._market = None
        self._execution_id = None
        self._is_activated = None
        self._is_favorite = None
        self._realized_profit = None
        self._unrealized_profit = None
        self._return_on_investment = None
        self._trade_amount_error = None
        self._account_error = None
        self._script_error = None
        self._update_counter = None
        self._chart_interval = None
        self._chart_style = None
        self._chart_volume = None
        self._runtime = None
        self._script_package = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if bot_id is not None:
            self.bot_id = bot_id
        if bot_name is not None:
            self.bot_name = bot_name
        if script_id is not None:
            self.script_id = script_id
        if script_version is not None:
            self.script_version = script_version
        if account_id is not None:
            self.account_id = account_id
        if market is not None:
            self.market = market
        if execution_id is not None:
            self.execution_id = execution_id
        if is_activated is not None:
            self.is_activated = is_activated
        if is_favorite is not None:
            self.is_favorite = is_favorite
        if realized_profit is not None:
            self.realized_profit = realized_profit
        if unrealized_profit is not None:
            self.unrealized_profit = unrealized_profit
        if return_on_investment is not None:
            self.return_on_investment = return_on_investment
        if trade_amount_error is not None:
            self.trade_amount_error = trade_amount_error
        if account_error is not None:
            self.account_error = account_error
        if script_error is not None:
            self.script_error = script_error
        if update_counter is not None:
            self.update_counter = update_counter
        if chart_interval is not None:
            self.chart_interval = chart_interval
        if chart_style is not None:
            self.chart_style = chart_style
        if chart_volume is not None:
            self.chart_volume = chart_volume
        if runtime is not None:
            self.runtime = runtime
        if script_package is not None:
            self.script_package = script_package

    @property
    def user_id(self):
        """Gets the user_id of this BotapiAddBotResponse.  # noqa: E501


        :return: The user_id of this BotapiAddBotResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BotapiAddBotResponse.


        :param user_id: The user_id of this BotapiAddBotResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def bot_id(self):
        """Gets the bot_id of this BotapiAddBotResponse.  # noqa: E501


        :return: The bot_id of this BotapiAddBotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bot_id

    @bot_id.setter
    def bot_id(self, bot_id):
        """Sets the bot_id of this BotapiAddBotResponse.


        :param bot_id: The bot_id of this BotapiAddBotResponse.  # noqa: E501
        :type: str
        """

        self._bot_id = bot_id

    @property
    def bot_name(self):
        """Gets the bot_name of this BotapiAddBotResponse.  # noqa: E501


        :return: The bot_name of this BotapiAddBotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bot_name

    @bot_name.setter
    def bot_name(self, bot_name):
        """Sets the bot_name of this BotapiAddBotResponse.


        :param bot_name: The bot_name of this BotapiAddBotResponse.  # noqa: E501
        :type: str
        """

        self._bot_name = bot_name

    @property
    def script_id(self):
        """Gets the script_id of this BotapiAddBotResponse.  # noqa: E501


        :return: The script_id of this BotapiAddBotResponse.  # noqa: E501
        :rtype: str
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this BotapiAddBotResponse.


        :param script_id: The script_id of this BotapiAddBotResponse.  # noqa: E501
        :type: str
        """

        self._script_id = script_id

    @property
    def script_version(self):
        """Gets the script_version of this BotapiAddBotResponse.  # noqa: E501


        :return: The script_version of this BotapiAddBotResponse.  # noqa: E501
        :rtype: int
        """
        return self._script_version

    @script_version.setter
    def script_version(self, script_version):
        """Sets the script_version of this BotapiAddBotResponse.


        :param script_version: The script_version of this BotapiAddBotResponse.  # noqa: E501
        :type: int
        """

        self._script_version = script_version

    @property
    def account_id(self):
        """Gets the account_id of this BotapiAddBotResponse.  # noqa: E501


        :return: The account_id of this BotapiAddBotResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this BotapiAddBotResponse.


        :param account_id: The account_id of this BotapiAddBotResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def market(self):
        """Gets the market of this BotapiAddBotResponse.  # noqa: E501


        :return: The market of this BotapiAddBotResponse.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this BotapiAddBotResponse.


        :param market: The market of this BotapiAddBotResponse.  # noqa: E501
        :type: str
        """

        self._market = market

    @property
    def execution_id(self):
        """Gets the execution_id of this BotapiAddBotResponse.  # noqa: E501


        :return: The execution_id of this BotapiAddBotResponse.  # noqa: E501
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this BotapiAddBotResponse.


        :param execution_id: The execution_id of this BotapiAddBotResponse.  # noqa: E501
        :type: str
        """

        self._execution_id = execution_id

    @property
    def is_activated(self):
        """Gets the is_activated of this BotapiAddBotResponse.  # noqa: E501


        :return: The is_activated of this BotapiAddBotResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_activated

    @is_activated.setter
    def is_activated(self, is_activated):
        """Sets the is_activated of this BotapiAddBotResponse.


        :param is_activated: The is_activated of this BotapiAddBotResponse.  # noqa: E501
        :type: bool
        """

        self._is_activated = is_activated

    @property
    def is_favorite(self):
        """Gets the is_favorite of this BotapiAddBotResponse.  # noqa: E501


        :return: The is_favorite of this BotapiAddBotResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite):
        """Sets the is_favorite of this BotapiAddBotResponse.


        :param is_favorite: The is_favorite of this BotapiAddBotResponse.  # noqa: E501
        :type: bool
        """

        self._is_favorite = is_favorite

    @property
    def realized_profit(self):
        """Gets the realized_profit of this BotapiAddBotResponse.  # noqa: E501


        :return: The realized_profit of this BotapiAddBotResponse.  # noqa: E501
        :rtype: float
        """
        return self._realized_profit

    @realized_profit.setter
    def realized_profit(self, realized_profit):
        """Sets the realized_profit of this BotapiAddBotResponse.


        :param realized_profit: The realized_profit of this BotapiAddBotResponse.  # noqa: E501
        :type: float
        """

        self._realized_profit = realized_profit

    @property
    def unrealized_profit(self):
        """Gets the unrealized_profit of this BotapiAddBotResponse.  # noqa: E501


        :return: The unrealized_profit of this BotapiAddBotResponse.  # noqa: E501
        :rtype: float
        """
        return self._unrealized_profit

    @unrealized_profit.setter
    def unrealized_profit(self, unrealized_profit):
        """Sets the unrealized_profit of this BotapiAddBotResponse.


        :param unrealized_profit: The unrealized_profit of this BotapiAddBotResponse.  # noqa: E501
        :type: float
        """

        self._unrealized_profit = unrealized_profit

    @property
    def return_on_investment(self):
        """Gets the return_on_investment of this BotapiAddBotResponse.  # noqa: E501


        :return: The return_on_investment of this BotapiAddBotResponse.  # noqa: E501
        :rtype: float
        """
        return self._return_on_investment

    @return_on_investment.setter
    def return_on_investment(self, return_on_investment):
        """Sets the return_on_investment of this BotapiAddBotResponse.


        :param return_on_investment: The return_on_investment of this BotapiAddBotResponse.  # noqa: E501
        :type: float
        """

        self._return_on_investment = return_on_investment

    @property
    def trade_amount_error(self):
        """Gets the trade_amount_error of this BotapiAddBotResponse.  # noqa: E501


        :return: The trade_amount_error of this BotapiAddBotResponse.  # noqa: E501
        :rtype: bool
        """
        return self._trade_amount_error

    @trade_amount_error.setter
    def trade_amount_error(self, trade_amount_error):
        """Sets the trade_amount_error of this BotapiAddBotResponse.


        :param trade_amount_error: The trade_amount_error of this BotapiAddBotResponse.  # noqa: E501
        :type: bool
        """

        self._trade_amount_error = trade_amount_error

    @property
    def account_error(self):
        """Gets the account_error of this BotapiAddBotResponse.  # noqa: E501


        :return: The account_error of this BotapiAddBotResponse.  # noqa: E501
        :rtype: bool
        """
        return self._account_error

    @account_error.setter
    def account_error(self, account_error):
        """Sets the account_error of this BotapiAddBotResponse.


        :param account_error: The account_error of this BotapiAddBotResponse.  # noqa: E501
        :type: bool
        """

        self._account_error = account_error

    @property
    def script_error(self):
        """Gets the script_error of this BotapiAddBotResponse.  # noqa: E501


        :return: The script_error of this BotapiAddBotResponse.  # noqa: E501
        :rtype: bool
        """
        return self._script_error

    @script_error.setter
    def script_error(self, script_error):
        """Sets the script_error of this BotapiAddBotResponse.


        :param script_error: The script_error of this BotapiAddBotResponse.  # noqa: E501
        :type: bool
        """

        self._script_error = script_error

    @property
    def update_counter(self):
        """Gets the update_counter of this BotapiAddBotResponse.  # noqa: E501


        :return: The update_counter of this BotapiAddBotResponse.  # noqa: E501
        :rtype: int
        """
        return self._update_counter

    @update_counter.setter
    def update_counter(self, update_counter):
        """Sets the update_counter of this BotapiAddBotResponse.


        :param update_counter: The update_counter of this BotapiAddBotResponse.  # noqa: E501
        :type: int
        """

        self._update_counter = update_counter

    @property
    def chart_interval(self):
        """Gets the chart_interval of this BotapiAddBotResponse.  # noqa: E501


        :return: The chart_interval of this BotapiAddBotResponse.  # noqa: E501
        :rtype: int
        """
        return self._chart_interval

    @chart_interval.setter
    def chart_interval(self, chart_interval):
        """Sets the chart_interval of this BotapiAddBotResponse.


        :param chart_interval: The chart_interval of this BotapiAddBotResponse.  # noqa: E501
        :type: int
        """

        self._chart_interval = chart_interval

    @property
    def chart_style(self):
        """Gets the chart_style of this BotapiAddBotResponse.  # noqa: E501


        :return: The chart_style of this BotapiAddBotResponse.  # noqa: E501
        :rtype: int
        """
        return self._chart_style

    @chart_style.setter
    def chart_style(self, chart_style):
        """Sets the chart_style of this BotapiAddBotResponse.


        :param chart_style: The chart_style of this BotapiAddBotResponse.  # noqa: E501
        :type: int
        """

        self._chart_style = chart_style

    @property
    def chart_volume(self):
        """Gets the chart_volume of this BotapiAddBotResponse.  # noqa: E501


        :return: The chart_volume of this BotapiAddBotResponse.  # noqa: E501
        :rtype: bool
        """
        return self._chart_volume

    @chart_volume.setter
    def chart_volume(self, chart_volume):
        """Sets the chart_volume of this BotapiAddBotResponse.


        :param chart_volume: The chart_volume of this BotapiAddBotResponse.  # noqa: E501
        :type: bool
        """

        self._chart_volume = chart_volume

    @property
    def runtime(self):
        """Gets the runtime of this BotapiAddBotResponse.  # noqa: E501


        :return: The runtime of this BotapiAddBotResponse.  # noqa: E501
        :rtype: object
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this BotapiAddBotResponse.


        :param runtime: The runtime of this BotapiAddBotResponse.  # noqa: E501
        :type: object
        """

        self._runtime = runtime

    @property
    def script_package(self):
        """Gets the script_package of this BotapiAddBotResponse.  # noqa: E501


        :return: The script_package of this BotapiAddBotResponse.  # noqa: E501
        :rtype: object
        """
        return self._script_package

    @script_package.setter
    def script_package(self, script_package):
        """Sets the script_package of this BotapiAddBotResponse.


        :param script_package: The script_package of this BotapiAddBotResponse.  # noqa: E501
        :type: object
        """

        self._script_package = script_package

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BotapiAddBotResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BotapiAddBotResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
