# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountapiSetWalletAmountSimulatedRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userid': 'str',
        'interfacekey': 'str',
        'accountid': 'str',
        'market': 'str',
        'coin': 'str',
        'amount': 'float'
    }

    attribute_map = {
        'userid': 'userid',
        'interfacekey': 'interfacekey',
        'accountid': 'accountid',
        'market': 'market',
        'coin': 'coin',
        'amount': 'amount'
    }

    def __init__(self, userid=None, interfacekey=None, accountid=None, market=None, coin=None, amount=None):  # noqa: E501
        """AccountapiSetWalletAmountSimulatedRequest - a model defined in Swagger"""  # noqa: E501
        self._userid = None
        self._interfacekey = None
        self._accountid = None
        self._market = None
        self._coin = None
        self._amount = None
        self.discriminator = None
        self.userid = userid
        self.interfacekey = interfacekey
        self.accountid = accountid
        self.market = market
        self.coin = coin
        self.amount = amount

    @property
    def userid(self):
        """Gets the userid of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501

        The userid as obtained at the login  # noqa: E501

        :return: The userid of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this AccountapiSetWalletAmountSimulatedRequest.

        The userid as obtained at the login  # noqa: E501

        :param userid: The userid of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :type: str
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")  # noqa: E501

        self._userid = userid

    @property
    def interfacekey(self):
        """Gets the interfacekey of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501

        The interfacekey as generated at login  # noqa: E501

        :return: The interfacekey of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :rtype: str
        """
        return self._interfacekey

    @interfacekey.setter
    def interfacekey(self, interfacekey):
        """Sets the interfacekey of this AccountapiSetWalletAmountSimulatedRequest.

        The interfacekey as generated at login  # noqa: E501

        :param interfacekey: The interfacekey of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :type: str
        """
        if interfacekey is None:
            raise ValueError("Invalid value for `interfacekey`, must not be `None`")  # noqa: E501

        self._interfacekey = interfacekey

    @property
    def accountid(self):
        """Gets the accountid of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501


        :return: The accountid of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :rtype: str
        """
        return self._accountid

    @accountid.setter
    def accountid(self, accountid):
        """Sets the accountid of this AccountapiSetWalletAmountSimulatedRequest.


        :param accountid: The accountid of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :type: str
        """
        if accountid is None:
            raise ValueError("Invalid value for `accountid`, must not be `None`")  # noqa: E501

        self._accountid = accountid

    @property
    def market(self):
        """Gets the market of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501

        The code of the market, eg; BITFINEX_BTC_USD_  # noqa: E501

        :return: The market of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this AccountapiSetWalletAmountSimulatedRequest.

        The code of the market, eg; BITFINEX_BTC_USD_  # noqa: E501

        :param market: The market of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :type: str
        """
        if market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501

        self._market = market

    @property
    def coin(self):
        """Gets the coin of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501


        :return: The coin of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :rtype: str
        """
        return self._coin

    @coin.setter
    def coin(self, coin):
        """Sets the coin of this AccountapiSetWalletAmountSimulatedRequest.


        :param coin: The coin of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :type: str
        """
        if coin is None:
            raise ValueError("Invalid value for `coin`, must not be `None`")  # noqa: E501

        self._coin = coin

    @property
    def amount(self):
        """Gets the amount of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501


        :return: The amount of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AccountapiSetWalletAmountSimulatedRequest.


        :param amount: The amount of this AccountapiSetWalletAmountSimulatedRequest.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountapiSetWalletAmountSimulatedRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountapiSetWalletAmountSimulatedRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
