# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountapiAdjustLeverageSettingsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'userid': 'str',
        'interfacekey': 'str',
        'accountid': 'str',
        'market': 'str',
        'positionside': 'int',
        'positionmode': 'int',
        'marginmode': 'object',
        'leverage': 'float'
    }

    attribute_map = {
        'userid': 'userid',
        'interfacekey': 'interfacekey',
        'accountid': 'accountid',
        'market': 'market',
        'positionside': 'positionside',
        'positionmode': 'positionmode',
        'marginmode': 'marginmode',
        'leverage': 'leverage'
    }

    def __init__(self, userid=None, interfacekey=None, accountid=None, market=None, positionside=None, positionmode=None, marginmode=None, leverage=None):  # noqa: E501
        """AccountapiAdjustLeverageSettingsRequest - a model defined in Swagger"""  # noqa: E501
        self._userid = None
        self._interfacekey = None
        self._accountid = None
        self._market = None
        self._positionside = None
        self._positionmode = None
        self._marginmode = None
        self._leverage = None
        self.discriminator = None
        self.userid = userid
        self.interfacekey = interfacekey
        self.accountid = accountid
        self.market = market
        self.positionside = positionside
        self.positionmode = positionmode
        self.marginmode = marginmode
        self.leverage = leverage

    @property
    def userid(self):
        """Gets the userid of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501

        The userid as obtained at the login  # noqa: E501

        :return: The userid of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this AccountapiAdjustLeverageSettingsRequest.

        The userid as obtained at the login  # noqa: E501

        :param userid: The userid of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :type: str
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")  # noqa: E501

        self._userid = userid

    @property
    def interfacekey(self):
        """Gets the interfacekey of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501

        The interfacekey as generated at login  # noqa: E501

        :return: The interfacekey of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :rtype: str
        """
        return self._interfacekey

    @interfacekey.setter
    def interfacekey(self, interfacekey):
        """Sets the interfacekey of this AccountapiAdjustLeverageSettingsRequest.

        The interfacekey as generated at login  # noqa: E501

        :param interfacekey: The interfacekey of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :type: str
        """
        if interfacekey is None:
            raise ValueError("Invalid value for `interfacekey`, must not be `None`")  # noqa: E501

        self._interfacekey = interfacekey

    @property
    def accountid(self):
        """Gets the accountid of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501


        :return: The accountid of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :rtype: str
        """
        return self._accountid

    @accountid.setter
    def accountid(self, accountid):
        """Sets the accountid of this AccountapiAdjustLeverageSettingsRequest.


        :param accountid: The accountid of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :type: str
        """
        if accountid is None:
            raise ValueError("Invalid value for `accountid`, must not be `None`")  # noqa: E501

        self._accountid = accountid

    @property
    def market(self):
        """Gets the market of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501

        The code of the market, eg; BITFINEX_BTC_USD_  # noqa: E501

        :return: The market of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this AccountapiAdjustLeverageSettingsRequest.

        The code of the market, eg; BITFINEX_BTC_USD_  # noqa: E501

        :param market: The market of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :type: str
        """
        if market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501

        self._market = market

    @property
    def positionside(self):
        """Gets the positionside of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501


        :return: The positionside of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :rtype: int
        """
        return self._positionside

    @positionside.setter
    def positionside(self, positionside):
        """Sets the positionside of this AccountapiAdjustLeverageSettingsRequest.


        :param positionside: The positionside of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :type: int
        """
        if positionside is None:
            raise ValueError("Invalid value for `positionside`, must not be `None`")  # noqa: E501

        self._positionside = positionside

    @property
    def positionmode(self):
        """Gets the positionmode of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501


        :return: The positionmode of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :rtype: int
        """
        return self._positionmode

    @positionmode.setter
    def positionmode(self, positionmode):
        """Sets the positionmode of this AccountapiAdjustLeverageSettingsRequest.


        :param positionmode: The positionmode of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :type: int
        """
        if positionmode is None:
            raise ValueError("Invalid value for `positionmode`, must not be `None`")  # noqa: E501

        self._positionmode = positionmode

    @property
    def marginmode(self):
        """Gets the marginmode of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501


        :return: The marginmode of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :rtype: object
        """
        return self._marginmode

    @marginmode.setter
    def marginmode(self, marginmode):
        """Sets the marginmode of this AccountapiAdjustLeverageSettingsRequest.


        :param marginmode: The marginmode of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :type: object
        """
        if marginmode is None:
            raise ValueError("Invalid value for `marginmode`, must not be `None`")  # noqa: E501

        self._marginmode = marginmode

    @property
    def leverage(self):
        """Gets the leverage of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501


        :return: The leverage of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :rtype: float
        """
        return self._leverage

    @leverage.setter
    def leverage(self, leverage):
        """Sets the leverage of this AccountapiAdjustLeverageSettingsRequest.


        :param leverage: The leverage of this AccountapiAdjustLeverageSettingsRequest.  # noqa: E501
        :type: float
        """
        if leverage is None:
            raise ValueError("Invalid value for `leverage`, must not be `None`")  # noqa: E501

        self._leverage = leverage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountapiAdjustLeverageSettingsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountapiAdjustLeverageSettingsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
