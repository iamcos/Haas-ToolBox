# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BacktestapiGetBacktestResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unix': 'int',
        'user_id': 'str',
        'backtest_id': 'str',
        'backtest_start': 'int',
        'backtest_end': 'int',
        'backtest_tag': 'str',
        'execution_start': 'int',
        'execution_end': 'int',
        'script_tag': 'str',
        'account_tag': 'str',
        'market_tag': 'str',
        'profit_tags': 'str',
        'roi_tags': 'str',
        'is_archived': 'bool',
        'runtime_json': 'str'
    }

    attribute_map = {
        'unix': 'Unix',
        'user_id': 'UserId',
        'backtest_id': 'BacktestId',
        'backtest_start': 'BacktestStart',
        'backtest_end': 'BacktestEnd',
        'backtest_tag': 'BacktestTag',
        'execution_start': 'ExecutionStart',
        'execution_end': 'ExecutionEnd',
        'script_tag': 'ScriptTag',
        'account_tag': 'AccountTag',
        'market_tag': 'MarketTag',
        'profit_tags': 'ProfitTags',
        'roi_tags': 'ROITags',
        'is_archived': 'IsArchived',
        'runtime_json': 'RuntimeJson'
    }

    def __init__(self, unix=None, user_id=None, backtest_id=None, backtest_start=None, backtest_end=None, backtest_tag=None, execution_start=None, execution_end=None, script_tag=None, account_tag=None, market_tag=None, profit_tags=None, roi_tags=None, is_archived=None, runtime_json=None):  # noqa: E501
        """BacktestapiGetBacktestResponse - a model defined in Swagger"""  # noqa: E501
        self._unix = None
        self._user_id = None
        self._backtest_id = None
        self._backtest_start = None
        self._backtest_end = None
        self._backtest_tag = None
        self._execution_start = None
        self._execution_end = None
        self._script_tag = None
        self._account_tag = None
        self._market_tag = None
        self._profit_tags = None
        self._roi_tags = None
        self._is_archived = None
        self._runtime_json = None
        self.discriminator = None
        if unix is not None:
            self.unix = unix
        if user_id is not None:
            self.user_id = user_id
        if backtest_id is not None:
            self.backtest_id = backtest_id
        if backtest_start is not None:
            self.backtest_start = backtest_start
        if backtest_end is not None:
            self.backtest_end = backtest_end
        if backtest_tag is not None:
            self.backtest_tag = backtest_tag
        if execution_start is not None:
            self.execution_start = execution_start
        if execution_end is not None:
            self.execution_end = execution_end
        if script_tag is not None:
            self.script_tag = script_tag
        if account_tag is not None:
            self.account_tag = account_tag
        if market_tag is not None:
            self.market_tag = market_tag
        if profit_tags is not None:
            self.profit_tags = profit_tags
        if roi_tags is not None:
            self.roi_tags = roi_tags
        if is_archived is not None:
            self.is_archived = is_archived
        if runtime_json is not None:
            self.runtime_json = runtime_json

    @property
    def unix(self):
        """Gets the unix of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The unix of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: int
        """
        return self._unix

    @unix.setter
    def unix(self, unix):
        """Sets the unix of this BacktestapiGetBacktestResponse.


        :param unix: The unix of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: int
        """

        self._unix = unix

    @property
    def user_id(self):
        """Gets the user_id of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The user_id of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BacktestapiGetBacktestResponse.


        :param user_id: The user_id of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def backtest_id(self):
        """Gets the backtest_id of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The backtest_id of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: str
        """
        return self._backtest_id

    @backtest_id.setter
    def backtest_id(self, backtest_id):
        """Sets the backtest_id of this BacktestapiGetBacktestResponse.


        :param backtest_id: The backtest_id of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: str
        """

        self._backtest_id = backtest_id

    @property
    def backtest_start(self):
        """Gets the backtest_start of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The backtest_start of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: int
        """
        return self._backtest_start

    @backtest_start.setter
    def backtest_start(self, backtest_start):
        """Sets the backtest_start of this BacktestapiGetBacktestResponse.


        :param backtest_start: The backtest_start of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: int
        """

        self._backtest_start = backtest_start

    @property
    def backtest_end(self):
        """Gets the backtest_end of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The backtest_end of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: int
        """
        return self._backtest_end

    @backtest_end.setter
    def backtest_end(self, backtest_end):
        """Sets the backtest_end of this BacktestapiGetBacktestResponse.


        :param backtest_end: The backtest_end of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: int
        """

        self._backtest_end = backtest_end

    @property
    def backtest_tag(self):
        """Gets the backtest_tag of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The backtest_tag of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: str
        """
        return self._backtest_tag

    @backtest_tag.setter
    def backtest_tag(self, backtest_tag):
        """Sets the backtest_tag of this BacktestapiGetBacktestResponse.


        :param backtest_tag: The backtest_tag of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: str
        """

        self._backtest_tag = backtest_tag

    @property
    def execution_start(self):
        """Gets the execution_start of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The execution_start of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: int
        """
        return self._execution_start

    @execution_start.setter
    def execution_start(self, execution_start):
        """Sets the execution_start of this BacktestapiGetBacktestResponse.


        :param execution_start: The execution_start of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: int
        """

        self._execution_start = execution_start

    @property
    def execution_end(self):
        """Gets the execution_end of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The execution_end of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: int
        """
        return self._execution_end

    @execution_end.setter
    def execution_end(self, execution_end):
        """Sets the execution_end of this BacktestapiGetBacktestResponse.


        :param execution_end: The execution_end of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: int
        """

        self._execution_end = execution_end

    @property
    def script_tag(self):
        """Gets the script_tag of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The script_tag of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: str
        """
        return self._script_tag

    @script_tag.setter
    def script_tag(self, script_tag):
        """Sets the script_tag of this BacktestapiGetBacktestResponse.


        :param script_tag: The script_tag of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: str
        """

        self._script_tag = script_tag

    @property
    def account_tag(self):
        """Gets the account_tag of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The account_tag of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_tag

    @account_tag.setter
    def account_tag(self, account_tag):
        """Sets the account_tag of this BacktestapiGetBacktestResponse.


        :param account_tag: The account_tag of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: str
        """

        self._account_tag = account_tag

    @property
    def market_tag(self):
        """Gets the market_tag of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The market_tag of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: str
        """
        return self._market_tag

    @market_tag.setter
    def market_tag(self, market_tag):
        """Sets the market_tag of this BacktestapiGetBacktestResponse.


        :param market_tag: The market_tag of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: str
        """

        self._market_tag = market_tag

    @property
    def profit_tags(self):
        """Gets the profit_tags of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The profit_tags of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: str
        """
        return self._profit_tags

    @profit_tags.setter
    def profit_tags(self, profit_tags):
        """Sets the profit_tags of this BacktestapiGetBacktestResponse.


        :param profit_tags: The profit_tags of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: str
        """

        self._profit_tags = profit_tags

    @property
    def roi_tags(self):
        """Gets the roi_tags of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The roi_tags of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: str
        """
        return self._roi_tags

    @roi_tags.setter
    def roi_tags(self, roi_tags):
        """Sets the roi_tags of this BacktestapiGetBacktestResponse.


        :param roi_tags: The roi_tags of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: str
        """

        self._roi_tags = roi_tags

    @property
    def is_archived(self):
        """Gets the is_archived of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The is_archived of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """Sets the is_archived of this BacktestapiGetBacktestResponse.


        :param is_archived: The is_archived of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def runtime_json(self):
        """Gets the runtime_json of this BacktestapiGetBacktestResponse.  # noqa: E501


        :return: The runtime_json of this BacktestapiGetBacktestResponse.  # noqa: E501
        :rtype: str
        """
        return self._runtime_json

    @runtime_json.setter
    def runtime_json(self, runtime_json):
        """Sets the runtime_json of this BacktestapiGetBacktestResponse.


        :param runtime_json: The runtime_json of this BacktestapiGetBacktestResponse.  # noqa: E501
        :type: str
        """

        self._runtime_json = runtime_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BacktestapiGetBacktestResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BacktestapiGetBacktestResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
