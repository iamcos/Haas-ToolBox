# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserapiGetNotificationProfileResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'security': 'bool',
        'miscellaneous': 'bool',
        'order_executing': 'bool',
        'order_placed': 'bool',
        'order_failed': 'bool',
        'order_cancelled': 'bool',
        'order_completed': 'bool',
        'bot_order_completed': 'bool'
    }

    attribute_map = {
        'security': 'Security',
        'miscellaneous': 'Miscellaneous',
        'order_executing': 'OrderExecuting',
        'order_placed': 'OrderPlaced',
        'order_failed': 'OrderFailed',
        'order_cancelled': 'OrderCancelled',
        'order_completed': 'OrderCompleted',
        'bot_order_completed': 'BotOrderCompleted'
    }

    def __init__(self, security=None, miscellaneous=None, order_executing=None, order_placed=None, order_failed=None, order_cancelled=None, order_completed=None, bot_order_completed=None):  # noqa: E501
        """UserapiGetNotificationProfileResponse - a model defined in Swagger"""  # noqa: E501
        self._security = None
        self._miscellaneous = None
        self._order_executing = None
        self._order_placed = None
        self._order_failed = None
        self._order_cancelled = None
        self._order_completed = None
        self._bot_order_completed = None
        self.discriminator = None
        if security is not None:
            self.security = security
        if miscellaneous is not None:
            self.miscellaneous = miscellaneous
        if order_executing is not None:
            self.order_executing = order_executing
        if order_placed is not None:
            self.order_placed = order_placed
        if order_failed is not None:
            self.order_failed = order_failed
        if order_cancelled is not None:
            self.order_cancelled = order_cancelled
        if order_completed is not None:
            self.order_completed = order_completed
        if bot_order_completed is not None:
            self.bot_order_completed = bot_order_completed

    @property
    def security(self):
        """Gets the security of this UserapiGetNotificationProfileResponse.  # noqa: E501


        :return: The security of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this UserapiGetNotificationProfileResponse.


        :param security: The security of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :type: bool
        """

        self._security = security

    @property
    def miscellaneous(self):
        """Gets the miscellaneous of this UserapiGetNotificationProfileResponse.  # noqa: E501


        :return: The miscellaneous of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._miscellaneous

    @miscellaneous.setter
    def miscellaneous(self, miscellaneous):
        """Sets the miscellaneous of this UserapiGetNotificationProfileResponse.


        :param miscellaneous: The miscellaneous of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :type: bool
        """

        self._miscellaneous = miscellaneous

    @property
    def order_executing(self):
        """Gets the order_executing of this UserapiGetNotificationProfileResponse.  # noqa: E501


        :return: The order_executing of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._order_executing

    @order_executing.setter
    def order_executing(self, order_executing):
        """Sets the order_executing of this UserapiGetNotificationProfileResponse.


        :param order_executing: The order_executing of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :type: bool
        """

        self._order_executing = order_executing

    @property
    def order_placed(self):
        """Gets the order_placed of this UserapiGetNotificationProfileResponse.  # noqa: E501


        :return: The order_placed of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._order_placed

    @order_placed.setter
    def order_placed(self, order_placed):
        """Sets the order_placed of this UserapiGetNotificationProfileResponse.


        :param order_placed: The order_placed of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :type: bool
        """

        self._order_placed = order_placed

    @property
    def order_failed(self):
        """Gets the order_failed of this UserapiGetNotificationProfileResponse.  # noqa: E501


        :return: The order_failed of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._order_failed

    @order_failed.setter
    def order_failed(self, order_failed):
        """Sets the order_failed of this UserapiGetNotificationProfileResponse.


        :param order_failed: The order_failed of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :type: bool
        """

        self._order_failed = order_failed

    @property
    def order_cancelled(self):
        """Gets the order_cancelled of this UserapiGetNotificationProfileResponse.  # noqa: E501


        :return: The order_cancelled of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._order_cancelled

    @order_cancelled.setter
    def order_cancelled(self, order_cancelled):
        """Sets the order_cancelled of this UserapiGetNotificationProfileResponse.


        :param order_cancelled: The order_cancelled of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :type: bool
        """

        self._order_cancelled = order_cancelled

    @property
    def order_completed(self):
        """Gets the order_completed of this UserapiGetNotificationProfileResponse.  # noqa: E501


        :return: The order_completed of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._order_completed

    @order_completed.setter
    def order_completed(self, order_completed):
        """Sets the order_completed of this UserapiGetNotificationProfileResponse.


        :param order_completed: The order_completed of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :type: bool
        """

        self._order_completed = order_completed

    @property
    def bot_order_completed(self):
        """Gets the bot_order_completed of this UserapiGetNotificationProfileResponse.  # noqa: E501


        :return: The bot_order_completed of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._bot_order_completed

    @bot_order_completed.setter
    def bot_order_completed(self, bot_order_completed):
        """Sets the bot_order_completed of this UserapiGetNotificationProfileResponse.


        :param bot_order_completed: The bot_order_completed of this UserapiGetNotificationProfileResponse.  # noqa: E501
        :type: bool
        """

        self._bot_order_completed = bot_order_completed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserapiGetNotificationProfileResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserapiGetNotificationProfileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
