# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_account(self, **kwargs):  # noqa: E501
        """Adds a new real account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str name:
        :param str drivercode:
        :param int drivertype:
        :param str publickey:
        :param str privatekey:
        :param str extrakey:
        :param bool istestnet:
        :return: AccountapiAddAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_account_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new real account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str name:
        :param str drivercode:
        :param int drivertype:
        :param str publickey:
        :param str privatekey:
        :param str extrakey:
        :param bool istestnet:
        :return: AccountapiAddAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'name', 'drivercode', 'drivertype', 'publickey', 'privatekey', 'extrakey', 'istestnet']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_account" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'drivercode' in params:
            form_params.append(('drivercode', params['drivercode']))  # noqa: E501
        if 'drivertype' in params:
            form_params.append(('drivertype', params['drivertype']))  # noqa: E501
        if 'publickey' in params:
            form_params.append(('publickey', params['publickey']))  # noqa: E501
        if 'privatekey' in params:
            form_params.append(('privatekey', params['privatekey']))  # noqa: E501
        if 'extrakey' in params:
            form_params.append(('extrakey', params['extrakey']))  # noqa: E501
        if 'istestnet' in params:
            form_params.append(('istestnet', params['istestnet']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=ADD_ACCOUNT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiAddAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_simulated_account(self, **kwargs):  # noqa: E501
        """Adds a new simulated account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_simulated_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str name:
        :param str drivercode:
        :param int drivertype:
        :return: AccountapiAddSimulatedAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_simulated_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_simulated_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_simulated_account_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new simulated account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_simulated_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str name:
        :param str drivercode:
        :param int drivertype:
        :return: AccountapiAddSimulatedAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'name', 'drivercode', 'drivertype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_simulated_account" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'drivercode' in params:
            form_params.append(('drivercode', params['drivercode']))  # noqa: E501
        if 'drivertype' in params:
            form_params.append(('drivertype', params['drivertype']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=ADD_SIMULATED_ACCOUNT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiAddSimulatedAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adjust_leverage_settings(self, **kwargs):  # noqa: E501
        """Sets new properties to a leverage configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_leverage_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str market:
        :param int positionside:
        :param int positionmode:
        :param object marginmode:
        :param float leverage:
        :return: AccountapiAdjustLeverageSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.adjust_leverage_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adjust_leverage_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def adjust_leverage_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Sets new properties to a leverage configuration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.adjust_leverage_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str market:
        :param int positionside:
        :param int positionmode:
        :param object marginmode:
        :param float leverage:
        :return: AccountapiAdjustLeverageSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid', 'market', 'positionside', 'positionmode', 'marginmode', 'leverage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adjust_leverage_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501
        if 'positionside' in params:
            form_params.append(('positionside', params['positionside']))  # noqa: E501
        if 'positionmode' in params:
            form_params.append(('positionmode', params['positionmode']))  # noqa: E501
        if 'marginmode' in params:
            form_params.append(('marginmode', params['marginmode']))  # noqa: E501
        if 'leverage' in params:
            form_params.append(('leverage', params['leverage']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=ADJUST_LEVERAGE_SETTINGS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiAdjustLeverageSettingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_account(self, **kwargs):  # noqa: E501
        """Deletes the given account and all its history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiDeleteAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_account_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes the given account and all its history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiDeleteAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_account" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=DELETE_ACCOUNT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiDeleteAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_account_keys(self, **kwargs):  # noqa: E501
        """Updates the real account its API keys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_account_keys(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str publickey:
        :param str privatekey:
        :param str extrakey:
        :return: AccountapiEditAccountKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_account_keys_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.edit_account_keys_with_http_info(**kwargs)  # noqa: E501
            return data

    def edit_account_keys_with_http_info(self, **kwargs):  # noqa: E501
        """Updates the real account its API keys  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_account_keys_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str publickey:
        :param str privatekey:
        :param str extrakey:
        :return: AccountapiEditAccountKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid', 'publickey', 'privatekey', 'extrakey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_account_keys" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'publickey' in params:
            form_params.append(('publickey', params['publickey']))  # noqa: E501
        if 'privatekey' in params:
            form_params.append(('privatekey', params['privatekey']))  # noqa: E501
        if 'extrakey' in params:
            form_params.append(('extrakey', params['extrakey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=EDIT_ACCOUNT_KEYS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiEditAccountKeysResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_account_visabilty(self, **kwargs):  # noqa: E501
        """Changes the account its public visability  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_account_visabilty(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param bool publicvisible:
        :return: AccountapiEditAccountVisabiltyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_account_visabilty_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.edit_account_visabilty_with_http_info(**kwargs)  # noqa: E501
            return data

    def edit_account_visabilty_with_http_info(self, **kwargs):  # noqa: E501
        """Changes the account its public visability  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_account_visabilty_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param bool publicvisible:
        :return: AccountapiEditAccountVisabiltyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid', 'publicvisible']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_account_visabilty" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'publicvisible' in params:
            form_params.append(('publicvisible', params['publicvisible']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=EDIT_ACCOUNT_VISABILTY', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiEditAccountVisabiltyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_account_data(self, **kwargs):  # noqa: E501
        """Returns all the details of the given account (wallet, orders, positions)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetAccountDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_account_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_account_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_account_data_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the details of the given account (wallet, orders, positions)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_account_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetAccountDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_account_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_ACCOUNT_DATA', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetAccountDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_accounts(self, **kwargs):  # noqa: E501
        """Returns a list of all real and simulated accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all real and simulated accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAccountsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_ACCOUNTS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetAccountsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_orders(self, **kwargs):  # noqa: E501
        """Returns all the user its open orders of all accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_orders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAllOrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_orders_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the user its open orders of all accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_orders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAllOrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_orders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_ALL_ORDERS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetAllOrdersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_positions(self, **kwargs):  # noqa: E501
        """Returns all the user its open positions of all accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_positions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAllPositionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_positions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_positions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_positions_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the user its open positions of all accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_positions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAllPositionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_positions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_ALL_POSITIONS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetAllPositionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_trades(self, **kwargs):  # noqa: E501
        """Returns all the recent historical trades of all the accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trades(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAllTradesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_trades_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_trades_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_trades_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the recent historical trades of all the accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_trades_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAllTradesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_trades" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_ALL_TRADES', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetAllTradesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_wallets(self, **kwargs):  # noqa: E501
        """Returns all the user its wallets of all accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_wallets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAllWalletsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_wallets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_wallets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_wallets_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the user its wallets of all accounts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_wallets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: AccountapiGetAllWalletsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_wallets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_ALL_WALLETS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetAllWalletsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leverage_settings(self, **kwargs):  # noqa: E501
        """Returns the leverage settings as setup on the API (per market)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leverage_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str market:
        :return: AccountapiGetLeverageSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leverage_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_leverage_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_leverage_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the leverage settings as setup on the API (per market)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leverage_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str market:
        :return: AccountapiGetLeverageSettingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid', 'market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leverage_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_LEVERAGE_SETTINGS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetLeverageSettingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_orders(self, **kwargs):  # noqa: E501
        """Returns the open orders of the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_orders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetOrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_orders_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the open orders of the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_orders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetOrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_orders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_ORDERS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetOrdersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_positions(self, **kwargs):  # noqa: E501
        """Returns the open positions of the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_positions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetPositionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_positions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_positions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_positions_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the open positions of the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_positions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetPositionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_positions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_POSITIONS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetPositionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_trades(self, **kwargs):  # noqa: E501
        """Returns the historical trades of the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trades(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetTradesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_trades_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_trades_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_trades_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the historical trades of the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_trades_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetTradesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_trades" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_TRADES', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetTradesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_wallet(self, **kwargs):  # noqa: E501
        """Returns the wallet of the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wallet(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetWalletResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_wallet_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_wallet_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_wallet_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the wallet of the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_wallet_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :return: AccountapiGetWalletResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_wallet" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=GET_WALLET', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiGetWalletResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rename_account(self, **kwargs):  # noqa: E501
        """Renames the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str name:
        :return: AccountapiRenameAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rename_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rename_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def rename_account_with_http_info(self, **kwargs):  # noqa: E501
        """Renames the given account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str name:
        :return: AccountapiRenameAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_account" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=RENAME_ACCOUNT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiRenameAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_wallet_amount_simulated(self, **kwargs):  # noqa: E501
        """Sets a new coin amount to a simulated wallet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_wallet_amount_simulated(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str market:
        :param str coin:
        :param float amount:
        :return: AccountapiSetWalletAmountSimulatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_wallet_amount_simulated_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_wallet_amount_simulated_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_wallet_amount_simulated_with_http_info(self, **kwargs):  # noqa: E501
        """Sets a new coin amount to a simulated wallet  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_wallet_amount_simulated_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str accountid:
        :param str market:
        :param str coin:
        :param float amount:
        :return: AccountapiSetWalletAmountSimulatedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'accountid', 'market', 'coin', 'amount']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_wallet_amount_simulated" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'accountid' in params:
            form_params.append(('accountid', params['accountid']))  # noqa: E501
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501
        if 'coin' in params:
            form_params.append(('coin', params['coin']))  # noqa: E501
        if 'amount' in params:
            form_params.append(('amount', params['amount']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=SET_WALLET_AMOUNT_SIMULATED', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiSetWalletAmountSimulatedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_account(self, **kwargs):  # noqa: E501
        """Adds a new testnet account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_account(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str drivercode:
        :param int drivertype:
        :param str publickey:
        :param str privatekey:
        :param str extrakey:
        :param bool istestnet:
        :return: AccountapiTestAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_account_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.test_account_with_http_info(**kwargs)  # noqa: E501
            return data

    def test_account_with_http_info(self, **kwargs):  # noqa: E501
        """Adds a new testnet account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_account_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str drivercode:
        :param int drivertype:
        :param str publickey:
        :param str privatekey:
        :param str extrakey:
        :param bool istestnet:
        :return: AccountapiTestAccountResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'drivercode', 'drivertype', 'publickey', 'privatekey', 'extrakey', 'istestnet']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_account" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'drivercode' in params:
            form_params.append(('drivercode', params['drivercode']))  # noqa: E501
        if 'drivertype' in params:
            form_params.append(('drivertype', params['drivertype']))  # noqa: E501
        if 'publickey' in params:
            form_params.append(('publickey', params['publickey']))  # noqa: E501
        if 'privatekey' in params:
            form_params.append(('privatekey', params['privatekey']))  # noqa: E501
        if 'extrakey' in params:
            form_params.append(('extrakey', params['extrakey']))  # noqa: E501
        if 'istestnet' in params:
            form_params.append(('istestnet', params['istestnet']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/AccountAPI.php?channel=TEST_ACCOUNT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountapiTestAccountResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
