# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PriceAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def all_markets(self, **kwargs):  # noqa: E501
        """Returns a dictionary of the supported price sources and the markets they support  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_markets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiAllMarketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_markets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_markets_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_markets_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a dictionary of the supported price sources and the markets they support  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_markets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiAllMarketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_markets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=ALL_MARKETS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiAllMarketsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def all_pricesources(self, **kwargs):  # noqa: E501
        """Returns a simple list of all the supported pricesources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_pricesources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiAllPricesourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.all_pricesources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.all_pricesources_with_http_info(**kwargs)  # noqa: E501
            return data

    def all_pricesources_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a simple list of all the supported pricesources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.all_pricesources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiAllPricesourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_pricesources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=ALL_PRICESOURCES', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiAllPricesourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def coinlist(self, **kwargs):  # noqa: E501
        """Returns a list of all the coins which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coinlist(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiCoinlistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.coinlist_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.coinlist_with_http_info(**kwargs)  # noqa: E501
            return data

    def coinlist_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all the coins which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.coinlist_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiCoinlistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method coinlist" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=COINLIST', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiCoinlistResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deepticks(self, **kwargs):  # noqa: E501
        """Returns about 40,000 ticks of the last minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deepticks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiDeepticksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deepticks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.deepticks_with_http_info(**kwargs)  # noqa: E501
            return data

    def deepticks_with_http_info(self, **kwargs):  # noqa: E501
        """Returns about 40,000 ticks of the last minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deepticks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiDeepticksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deepticks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=DEEPTICKS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiDeepticksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def fiat_conversions(self, **kwargs):  # noqa: E501
        """Returns average a fiat conversion rates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fiat_conversions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiFiatConversionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.fiat_conversions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.fiat_conversions_with_http_info(**kwargs)  # noqa: E501
            return data

    def fiat_conversions_with_http_info(self, **kwargs):  # noqa: E501
        """Returns average a fiat conversion rates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.fiat_conversions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiFiatConversionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fiat_conversions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=FIAT_CONVERSIONS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiFiatConversionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_chart(self, **kwargs):  # noqa: E501
        """Returns a basic chart with prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :param int interval:
        :param int style:
        :return: PriceapiGetChartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_chart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_chart_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_chart_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a basic chart with prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_chart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :param int interval:
        :param int style:
        :return: PriceapiGetChartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market', 'interval', 'style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_chart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501
        if 'interval' in params:
            form_params.append(('interval', params['interval']))  # noqa: E501
        if 'style' in params:
            form_params.append(('style', params['style']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=GET_CHART', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiGetChartResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_exchange_price_change(self, **kwargs):  # noqa: E501
        """Returns list of price changes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_exchange_price_change(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pricesource:
        :param int hours:
        :return: PriceapiGetExchangePriceChangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_exchange_price_change_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_exchange_price_change_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_exchange_price_change_with_http_info(self, **kwargs):  # noqa: E501
        """Returns list of price changes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_exchange_price_change_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pricesource:
        :param int hours:
        :return: PriceapiGetExchangePriceChangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pricesource', 'hours']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_exchange_price_change" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'pricesource' in params:
            form_params.append(('pricesource', params['pricesource']))  # noqa: E501
        if 'hours' in params:
            form_params.append(('hours', params['hours']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=GET_EXCHANGE_PRICE_CHANGE', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiGetExchangePriceChangeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_history_compare_chart(self, **kwargs):  # noqa: E501
        """Returns a price compare chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_history_compare_chart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiGetHistoryCompareChartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_history_compare_chart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_history_compare_chart_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_history_compare_chart_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a price compare chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_history_compare_chart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiGetHistoryCompareChartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_history_compare_chart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=GET_HISTORY_COMPARE_CHART', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiGetHistoryCompareChartResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_spread_compare_chart(self, **kwargs):  # noqa: E501
        """Returns a price spread chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spread_compare_chart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiGetSpreadCompareChartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_spread_compare_chart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_spread_compare_chart_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_spread_compare_chart_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a price spread chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_spread_compare_chart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiGetSpreadCompareChartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_spread_compare_chart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=GET_SPREAD_COMPARE_CHART', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiGetSpreadCompareChartResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_volume_compare_chart(self, **kwargs):  # noqa: E501
        """Returns a volume compare chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_compare_chart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiGetVolumeCompareChartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_volume_compare_chart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_volume_compare_chart_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_volume_compare_chart_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a volume compare chart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_volume_compare_chart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiGetVolumeCompareChartResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_volume_compare_chart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=GET_VOLUME_COMPARE_CHART', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiGetVolumeCompareChartResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lastticks(self, **kwargs):  # noqa: E501
        """Returns between 500 and 1440 ticks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lastticks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :param int interval:
        :return: PriceapiLastticksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lastticks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.lastticks_with_http_info(**kwargs)  # noqa: E501
            return data

    def lastticks_with_http_info(self, **kwargs):  # noqa: E501
        """Returns between 500 and 1440 ticks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lastticks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :param int interval:
        :return: PriceapiLastticksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market', 'interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lastticks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501
        if 'interval' in params:
            form_params.append(('interval', params['interval']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=LASTTICKS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiLastticksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lasttrades(self, **kwargs):  # noqa: E501
        """Returns the last trades  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lasttrades(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiLasttradesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lasttrades_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.lasttrades_with_http_info(**kwargs)  # noqa: E501
            return data

    def lasttrades_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the last trades  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lasttrades_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiLasttradesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lasttrades" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=LASTTRADES', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiLasttradesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_snapshot(self, **kwargs):  # noqa: E501
        """Returns a snapshot of the very last prices (DO NOT USE!)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_snapshot(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiMarketSnapshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_snapshot_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.market_snapshot_with_http_info(**kwargs)  # noqa: E501
            return data

    def market_snapshot_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a snapshot of the very last prices (DO NOT USE!)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_snapshot_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiMarketSnapshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_snapshot" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=MARKET_SNAPSHOT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiMarketSnapshotResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def marketlist(self, **kwargs):  # noqa: E501
        """Returns a list of all the markets which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.marketlist(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiMarketlistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.marketlist_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.marketlist_with_http_info(**kwargs)  # noqa: E501
            return data

    def marketlist_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all the markets which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.marketlist_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiMarketlistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method marketlist" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=MARKETLIST', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiMarketlistResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def markets(self, **kwargs):  # noqa: E501
        """Returns a list of the supported markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pricesource:
        :return: PriceapiMarketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.markets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.markets_with_http_info(**kwargs)  # noqa: E501
            return data

    def markets_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of the supported markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.markets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pricesource:
        :return: PriceapiMarketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pricesource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method markets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'pricesource' in params:
            form_params.append(('pricesource', params['pricesource']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=MARKETS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiMarketsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def new_coins(self, **kwargs):  # noqa: E501
        """Returns a list of all the new coins which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.new_coins(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiNewCoinsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.new_coins_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.new_coins_with_http_info(**kwargs)  # noqa: E501
            return data

    def new_coins_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all the new coins which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.new_coins_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiNewCoinsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method new_coins" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=NEW_COINS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiNewCoinsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def new_markets(self, **kwargs):  # noqa: E501
        """Returns a list of all the new markets which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.new_markets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiNewMarketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.new_markets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.new_markets_with_http_info(**kwargs)  # noqa: E501
            return data

    def new_markets_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all the new markets which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.new_markets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiNewMarketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method new_markets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=NEW_MARKETS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiNewMarketsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def orderbook(self, **kwargs):  # noqa: E501
        """Returns the orderbook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orderbook(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiOrderbookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.orderbook_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.orderbook_with_http_info(**kwargs)  # noqa: E501
            return data

    def orderbook_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the orderbook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.orderbook_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiOrderbookResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method orderbook" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=ORDERBOOK', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiOrderbookResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def price(self, **kwargs):  # noqa: E501
        """Returns the last price  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.price(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiPriceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.price_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.price_with_http_info(**kwargs)  # noqa: E501
            return data

    def price_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the last price  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.price_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiPriceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method price" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=PRICE', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiPriceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pricepackage(self, **kwargs):  # noqa: E501
        """Returns a full month of price ticks (per minute)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pricepackage(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param Int64 nonce:
        :param str market:
        :param int year:
        :param int month:
        :return: PriceapiPricepackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pricepackage_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pricepackage_with_http_info(**kwargs)  # noqa: E501
            return data

    def pricepackage_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a full month of price ticks (per minute)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pricepackage_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param Int64 nonce:
        :param str market:
        :param int year:
        :param int month:
        :return: PriceapiPricepackageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'nonce', 'market', 'year', 'month']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pricepackage" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'nonce' in params:
            form_params.append(('nonce', params['nonce']))  # noqa: E501
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501
        if 'year' in params:
            form_params.append(('year', params['year']))  # noqa: E501
        if 'month' in params:
            form_params.append(('month', params['month']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=PRICEPACKAGE', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiPricepackageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def pricesources(self, **kwargs):  # noqa: E501
        """Returns a detailed list of all the supported pricesources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pricesources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiPricesourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.pricesources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.pricesources_with_http_info(**kwargs)  # noqa: E501
            return data

    def pricesources_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a detailed list of all the supported pricesources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.pricesources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiPricesourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method pricesources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=PRICESOURCES', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiPricesourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def related_markets(self, **kwargs):  # noqa: E501
        """Returns a list of all related markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.related_markets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiRelatedMarketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.related_markets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.related_markets_with_http_info(**kwargs)  # noqa: E501
            return data

    def related_markets_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all related markets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.related_markets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiRelatedMarketsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method related_markets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=RELATED_MARKETS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiRelatedMarketsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def related_prices(self, **kwargs):  # noqa: E501
        """Returns a list of all related market prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.related_prices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiRelatedPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.related_prices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.related_prices_with_http_info(**kwargs)  # noqa: E501
            return data

    def related_prices_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all related market prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.related_prices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiRelatedPricesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method related_prices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=RELATED_PRICES', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiRelatedPricesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def snapshot(self, **kwargs):  # noqa: E501
        """Returns a snapshot of the very last prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshot(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pricesource:
        :return: PriceapiSnapshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.snapshot_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.snapshot_with_http_info(**kwargs)  # noqa: E501
            return data

    def snapshot_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a snapshot of the very last prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.snapshot_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pricesource:
        :return: PriceapiSnapshotResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pricesource']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method snapshot" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'pricesource' in params:
            form_params.append(('pricesource', params['pricesource']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=SNAPSHOT', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiSnapshotResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def syncticks(self, **kwargs):  # noqa: E501
        """Returns the 10 very last minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.syncticks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiSyncticksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.syncticks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.syncticks_with_http_info(**kwargs)  # noqa: E501
            return data

    def syncticks_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the 10 very last minutes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.syncticks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str market:
        :return: PriceapiSyncticksResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method syncticks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=SYNCTICKS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiSyncticksResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def time(self, **kwargs):  # noqa: E501
        """Returns the servertime (UNIX-UTC)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiTimeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.time_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.time_with_http_info(**kwargs)  # noqa: E501
            return data

    def time_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the servertime (UNIX-UTC)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.time_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiTimeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method time" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=TIME', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiTimeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unique_marketlist(self, **kwargs):  # noqa: E501
        """Returns a list of all unique markets which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unique_marketlist(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiUniqueMarketlistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unique_marketlist_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.unique_marketlist_with_http_info(**kwargs)  # noqa: E501
            return data

    def unique_marketlist_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a list of all unique markets which are supported  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unique_marketlist_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PriceapiUniqueMarketlistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unique_marketlist" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/PriceAPI.php?channel=UNIQUE_MARKETLIST', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PriceapiUniqueMarketlistResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
