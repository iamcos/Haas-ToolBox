# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NewsFeedsAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_headlines_on_group(self, **kwargs):  # noqa: E501
        """Returns all headlines on group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_headlines_on_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group:
        :return: NewsfeedsapiGetHeadlinesOnGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_headlines_on_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_headlines_on_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_headlines_on_group_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all headlines on group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_headlines_on_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group:
        :return: NewsfeedsapiGetHeadlinesOnGroupResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_headlines_on_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'group' in params:
            form_params.append(('group', params['group']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/NewsFeedsAPI.php?channel=GET_HEADLINES_ON_GROUP', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewsfeedsapiGetHeadlinesOnGroupResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_headlines_on_key(self, **kwargs):  # noqa: E501
        """Returns all news xxxxxx  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_headlines_on_key(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group:
        :param str key:
        :return: NewsfeedsapiGetHeadlinesOnKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_headlines_on_key_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_headlines_on_key_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_headlines_on_key_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all news xxxxxx  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_headlines_on_key_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group:
        :param str key:
        :return: NewsfeedsapiGetHeadlinesOnKeyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_headlines_on_key" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'group' in params:
            form_params.append(('group', params['group']))  # noqa: E501
        if 'key' in params:
            form_params.append(('key', params['key']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/NewsFeedsAPI.php?channel=GET_HEADLINES_ON_KEY', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewsfeedsapiGetHeadlinesOnKeyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_headlines_on_name(self, **kwargs):  # noqa: E501
        """Returns all news per id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_headlines_on_name(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :return: NewsfeedsapiGetHeadlinesOnNameResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_headlines_on_name_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_headlines_on_name_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_headlines_on_name_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all news per id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_headlines_on_name_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :return: NewsfeedsapiGetHeadlinesOnNameResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_headlines_on_name" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/NewsFeedsAPI.php?channel=GET_HEADLINES_ON_NAME', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewsfeedsapiGetHeadlinesOnNameResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_market_news(self, **kwargs):  # noqa: E501
        """Returns all news related to the given market  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_market_news(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str market:
        :return: NewsfeedsapiGetMarketNewsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_market_news_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_market_news_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_market_news_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all news related to the given market  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_market_news_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str market:
        :return: NewsfeedsapiGetMarketNewsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_market_news" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/NewsFeedsAPI.php?channel=GET_MARKET_NEWS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewsfeedsapiGetMarketNewsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_news_feed_groups(self, **kwargs):  # noqa: E501
        """Returns all news groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_feed_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NewsfeedsapiGetNewsFeedGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_news_feed_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_news_feed_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_news_feed_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all news groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_feed_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NewsfeedsapiGetNewsFeedGroupsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_news_feed_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/NewsFeedsAPI.php?channel=GET_NEWS_FEED_GROUPS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewsfeedsapiGetNewsFeedGroupsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_news_feed_sources(self, **kwargs):  # noqa: E501
        """Returns all news sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_feed_sources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NewsfeedsapiGetNewsFeedSourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_news_feed_sources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_news_feed_sources_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_news_feed_sources_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all news sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_feed_sources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NewsfeedsapiGetNewsFeedSourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_news_feed_sources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/NewsFeedsAPI.php?channel=GET_NEWS_FEED_SOURCES', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewsfeedsapiGetNewsFeedSourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_news_page(self, **kwargs):  # noqa: E501
        """Returns all news for the news-page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_page(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: NewsfeedsapiGetNewsPageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_news_page_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_news_page_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_news_page_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all news for the news-page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_news_page_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: NewsfeedsapiGetNewsPageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_news_page" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/NewsFeedsAPI.php?channel=GET_NEWS_PAGE', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewsfeedsapiGetNewsPageResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_video_feed_sources(self, **kwargs):  # noqa: E501
        """Returns all videostream sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_feed_sources(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NewsfeedsapiGetVideoFeedSourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_video_feed_sources_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_video_feed_sources_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_video_feed_sources_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all videostream sources  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_video_feed_sources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NewsfeedsapiGetVideoFeedSourcesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_video_feed_sources" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/NewsFeedsAPI.php?channel=GET_VIDEO_FEED_SOURCES', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewsfeedsapiGetVideoFeedSourcesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
