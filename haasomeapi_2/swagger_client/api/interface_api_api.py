# coding: utf-8

"""
    Haasbot LocalAPI

    This is a rest api swagger for the Haasbot.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@haasonline.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class InterfaceAPIApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def changelog(self, **kwargs):  # noqa: E501
        """Returns the full change-log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.changelog(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: InterfaceapiChangelogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.changelog_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.changelog_with_http_info(**kwargs)  # noqa: E501
            return data

    def changelog_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the full change-log  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.changelog_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: InterfaceapiChangelogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method changelog" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=CHANGELOG', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceapiChangelogResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_blog_categories(self, **kwargs):  # noqa: E501
        """Returns all the blog catagories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blog_categories(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: InterfaceapiGetBlogCategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_blog_categories_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_blog_categories_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_blog_categories_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all the blog catagories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blog_categories_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :return: InterfaceapiGetBlogCategoriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blog_categories" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=GET_BLOG_CATEGORIES', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceapiGetBlogCategoriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_blog_post(self, **kwargs):  # noqa: E501
        """Returns a blogpost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blog_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :return: InterfaceapiGetBlogPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_blog_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_blog_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_blog_post_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a blogpost  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blog_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:
        :return: InterfaceapiGetBlogPostResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blog_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=GET_BLOG_POST', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceapiGetBlogPostResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def init_data(self, **kwargs):  # noqa: E501
        """Returns basic operational information, like the supported exchanges, pricesources and so on...  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.init_data(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InterfaceapiInitDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.init_data_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.init_data_with_http_info(**kwargs)  # noqa: E501
            return data

    def init_data_with_http_info(self, **kwargs):  # noqa: E501
        """Returns basic operational information, like the supported exchanges, pricesources and so on...  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.init_data_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InterfaceapiInitDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method init_data" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=INIT_DATA', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceapiInitDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_info(self, **kwargs):  # noqa: E501
        """Returns the market information page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str market:
        :return: InterfaceapiMarketInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.market_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def market_info_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the market information page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str market:
        :return: InterfaceapiMarketInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=MARKET_INFO', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceapiMarketInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_price_info(self, **kwargs):  # noqa: E501
        """Returns the market price information page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_price_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str market:
        :return: InterfaceapiMarketPriceInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_price_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.market_price_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def market_price_info_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the market price information page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_price_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str market:
        :return: InterfaceapiMarketPriceInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_price_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=MARKET_PRICE_INFO', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceapiMarketPriceInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def market_ta_info(self, **kwargs):  # noqa: E501
        """Returns the market price technical analysis page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_ta_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str market:
        :return: InterfaceapiMarketTaInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.market_ta_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.market_ta_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def market_ta_info_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the market price technical analysis page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.market_ta_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str market:
        :return: InterfaceapiMarketTaInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'market']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method market_ta_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'market' in params:
            form_params.append(('market', params['market']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=MARKET_TA_INFO', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceapiMarketTaInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_blog(self, **kwargs):  # noqa: E501
        """Searches the cloud its blog postings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_blog(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str category:
        :param str searchkey:
        :return: InterfaceapiSearchBlogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_blog_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_blog_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_blog_with_http_info(self, **kwargs):  # noqa: E501
        """Searches the cloud its blog postings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_blog_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid:
        :param str interfacekey:
        :param str category:
        :param str searchkey:
        :return: InterfaceapiSearchBlogResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid', 'interfacekey', 'category', 'searchkey']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_blog" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'userid' in params:
            form_params.append(('userid', params['userid']))  # noqa: E501
        if 'interfacekey' in params:
            form_params.append(('interfacekey', params['interfacekey']))  # noqa: E501
        if 'category' in params:
            form_params.append(('category', params['category']))  # noqa: E501
        if 'searchkey' in params:
            form_params.append(('searchkey', params['searchkey']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=SEARCH_BLOG', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InterfaceapiSearchBlogResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_privacy(self, **kwargs):  # noqa: E501
        """website_privacy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_privacy(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_privacy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.website_privacy_with_http_info(**kwargs)  # noqa: E501
            return data

    def website_privacy_with_http_info(self, **kwargs):  # noqa: E501
        """website_privacy  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_privacy_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_privacy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=WEBSITE_PRIVACY', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_security(self, **kwargs):  # noqa: E501
        """website_security  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_security(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_security_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.website_security_with_http_info(**kwargs)  # noqa: E501
            return data

    def website_security_with_http_info(self, **kwargs):  # noqa: E501
        """website_security  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_security_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_security" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=WEBSITE_SECURITY', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def website_terms(self, **kwargs):  # noqa: E501
        """website_terms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_terms(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.website_terms_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.website_terms_with_http_info(**kwargs)  # noqa: E501
            return data

    def website_terms_with_http_info(self, **kwargs):  # noqa: E501
        """website_terms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.website_terms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method website_terms" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/InterfaceAPI.php?channel=WEBSITE_TERMS', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
